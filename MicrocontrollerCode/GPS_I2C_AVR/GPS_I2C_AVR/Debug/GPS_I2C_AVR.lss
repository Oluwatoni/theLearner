
GPS_I2C_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000007d2  00000866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  0080010c  0080010c  00000872  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e72  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b1  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000383  00000000  00000000  00001cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  0000205c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080e  00000000  00000000  00002703  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002f11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 39       	cpi	r26, 0x9E	; 158
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <main>
  9e:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
#include "initialization.h"

void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter and RX interrupt */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
  ae:	88 e9       	ldi	r24, 0x98	; 152
  b0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	08 95       	ret

000000bc <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24
  ca:	08 95       	ret

000000cc <compareCharArray>:
	return TWIerrorMsg;
}

uint8_t compareCharArray(char a[], char b[], uint8_t size)
{
	for (uint8_t i = 0;i < size; i++)
  cc:	44 23       	and	r20, r20
  ce:	d1 f0       	breq	.+52     	; 0x104 <compareCharArray+0x38>
	{
		if (a[i] != b[i])
  d0:	fc 01       	movw	r30, r24
  d2:	30 81       	ld	r19, Z
  d4:	fb 01       	movw	r30, r22
  d6:	20 81       	ld	r18, Z
  d8:	32 13       	cpse	r19, r18
  da:	16 c0       	rjmp	.+44     	; 0x108 <compareCharArray+0x3c>
  dc:	fc 01       	movw	r30, r24
  de:	31 96       	adiw	r30, 0x01	; 1
  e0:	db 01       	movw	r26, r22
  e2:	11 96       	adiw	r26, 0x01	; 1
  e4:	41 50       	subi	r20, 0x01	; 1
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	4f 5f       	subi	r20, 0xFF	; 255
  ea:	5f 4f       	sbci	r21, 0xFF	; 255
  ec:	48 0f       	add	r20, r24
  ee:	59 1f       	adc	r21, r25
  f0:	04 c0       	rjmp	.+8      	; 0xfa <compareCharArray+0x2e>
  f2:	21 91       	ld	r18, Z+
  f4:	9d 91       	ld	r25, X+
  f6:	29 13       	cpse	r18, r25
  f8:	09 c0       	rjmp	.+18     	; 0x10c <compareCharArray+0x40>
	return TWIerrorMsg;
}

uint8_t compareCharArray(char a[], char b[], uint8_t size)
{
	for (uint8_t i = 0;i < size; i++)
  fa:	e4 17       	cp	r30, r20
  fc:	f5 07       	cpc	r31, r21
  fe:	c9 f7       	brne	.-14     	; 0xf2 <compareCharArray+0x26>
	{
		if (a[i] != b[i])
			return 0;
	}
	return 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret
uint8_t compareCharArray(char a[], char b[], uint8_t size)
{
	for (uint8_t i = 0;i < size; i++)
	{
		if (a[i] != b[i])
			return 0;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
 10e:	08 95       	ret

00000110 <fillCharArray>:

//Returns the amount of units to increment the pointer
uint8_t fillCharArray(char array[], char* pointer, uint8_t size, uint8_t no_of_commas)
{
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	8c 01       	movw	r16, r24
	uint8_t move_pointer_by = 0;
  uint16_t total = 0;
	for(int i = 0; i < size; i++)
 11a:	44 23       	and	r20, r20
 11c:	d1 f0       	breq	.+52     	; 0x152 <fillCharArray+0x42>
 11e:	a6 2f       	mov	r26, r22
 120:	b7 2f       	mov	r27, r23
 122:	fc 01       	movw	r30, r24
 124:	bc 01       	movw	r22, r24
 126:	64 0f       	add	r22, r20
 128:	71 1d       	adc	r23, r1
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
 12e:	50 e0       	ldi	r21, 0x00	; 0
	{
		if(*pointer == ',' || *pointer == '\n')
 130:	9d 91       	ld	r25, X+
 132:	9c 32       	cpi	r25, 0x2C	; 44
 134:	11 f0       	breq	.+4      	; 0x13a <fillCharArray+0x2a>
 136:	9a 30       	cpi	r25, 0x0A	; 10
 138:	21 f4       	brne	.+8      	; 0x142 <fillCharArray+0x32>
		{
			no_of_commas--;
 13a:	21 50       	subi	r18, 0x01	; 1
			if (!no_of_commas)
 13c:	11 f4       	brne	.+4      	; 0x142 <fillCharArray+0x32>
			{
				move_pointer_by++;
 13e:	5f 5f       	subi	r21, 0xFF	; 255
				break;
 140:	0b c0       	rjmp	.+22     	; 0x158 <fillCharArray+0x48>
			}
		}
		array[i] = (char)*pointer;
 142:	91 93       	st	Z+, r25
    total+= array[i];
 144:	c9 0f       	add	r28, r25
 146:	d1 1d       	adc	r29, r1
		pointer++;
		move_pointer_by++;
 148:	5f 5f       	subi	r21, 0xFF	; 255
//Returns the amount of units to increment the pointer
uint8_t fillCharArray(char array[], char* pointer, uint8_t size, uint8_t no_of_commas)
{
	uint8_t move_pointer_by = 0;
  uint16_t total = 0;
	for(int i = 0; i < size; i++)
 14a:	e6 17       	cp	r30, r22
 14c:	f7 07       	cpc	r31, r23
 14e:	81 f7       	brne	.-32     	; 0x130 <fillCharArray+0x20>
 150:	03 c0       	rjmp	.+6      	; 0x158 <fillCharArray+0x48>

//Returns the amount of units to increment the pointer
uint8_t fillCharArray(char array[], char* pointer, uint8_t size, uint8_t no_of_commas)
{
	uint8_t move_pointer_by = 0;
  uint16_t total = 0;
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
}

//Returns the amount of units to increment the pointer
uint8_t fillCharArray(char array[], char* pointer, uint8_t size, uint8_t no_of_commas)
{
	uint8_t move_pointer_by = 0;
 156:	50 e0       	ldi	r21, 0x00	; 0
    total+= array[i];
		pointer++;
		move_pointer_by++;
	}
  total %= 255;
  array[size-1] = (char) total;
 158:	04 0f       	add	r16, r20
 15a:	11 1d       	adc	r17, r1
 15c:	f8 01       	movw	r30, r16
 15e:	31 97       	sbiw	r30, 0x01	; 1
		array[i] = (char)*pointer;
    total+= array[i];
		pointer++;
		move_pointer_by++;
	}
  total %= 255;
 160:	9e 01       	movw	r18, r28
 162:	a1 e8       	ldi	r26, 0x81	; 129
 164:	b0 e8       	ldi	r27, 0x80	; 128
 166:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__umulhisi3>
 16a:	88 0f       	add	r24, r24
 16c:	89 2f       	mov	r24, r25
 16e:	88 1f       	adc	r24, r24
 170:	99 0b       	sbc	r25, r25
 172:	91 95       	neg	r25
 174:	4f ef       	ldi	r20, 0xFF	; 255
 176:	48 9f       	mul	r20, r24
 178:	90 01       	movw	r18, r0
 17a:	49 9f       	mul	r20, r25
 17c:	30 0d       	add	r19, r0
 17e:	11 24       	eor	r1, r1
 180:	c2 1b       	sub	r28, r18
 182:	d3 0b       	sbc	r29, r19
  array[size-1] = (char) total;
 184:	c0 83       	st	Z, r28
	return move_pointer_by;
}
 186:	85 2f       	mov	r24, r21
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <printCharArray>:

void printCharArray(char array[], uint8_t size)
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	for (uint8_t i = 0;i < size; i++)
 19a:	66 23       	and	r22, r22
 19c:	71 f0       	breq	.+28     	; 0x1ba <printCharArray+0x28>
 19e:	ec 01       	movw	r28, r24
 1a0:	61 50       	subi	r22, 0x01	; 1
 1a2:	06 2f       	mov	r16, r22
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	08 0f       	add	r16, r24
 1ac:	19 1f       	adc	r17, r25
	{
		USART_Transmit(array[i]);
 1ae:	89 91       	ld	r24, Y+
 1b0:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	return move_pointer_by;
}

void printCharArray(char array[], uint8_t size)
{
	for (uint8_t i = 0;i < size; i++)
 1b4:	c0 17       	cp	r28, r16
 1b6:	d1 07       	cpc	r29, r17
 1b8:	d1 f7       	brne	.-12     	; 0x1ae <printCharArray+0x1c>
	{
		USART_Transmit(array[i]);
	}
	USART_Transmit('\n');
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
 1bc:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <extractData>:

//TODO CHECKSUM CHECK
void extractData(char* message_index)
{
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	cc 57       	subi	r28, 0x7C	; 124
 1d8:	d1 09       	sbc	r29, r1
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	bc 01       	movw	r22, r24
	char message_type[MESSEAGE_TYPE_SIZE] = {'E','R','R'};
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	fe 01       	movw	r30, r28
 1ea:	31 96       	adiw	r30, 0x01	; 1
 1ec:	df 01       	movw	r26, r30
 1ee:	38 2f       	mov	r19, r24
 1f0:	1d 92       	st	X+, r1
 1f2:	3a 95       	dec	r19
 1f4:	e9 f7       	brne	.-6      	; 0x1f0 <extractData+0x26>
 1f6:	25 e4       	ldi	r18, 0x45	; 69
 1f8:	29 83       	std	Y+1, r18	; 0x01
 1fa:	92 e5       	ldi	r25, 0x52	; 82
 1fc:	9a 83       	std	Y+2, r25	; 0x02
 1fe:	9b 83       	std	Y+3, r25	; 0x03
	char gprmc[] = {'G','P','R','M','C'};
 200:	35 e0       	ldi	r19, 0x05	; 5
 202:	e1 e0       	ldi	r30, 0x01	; 1
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	de 01       	movw	r26, r28
 208:	17 96       	adiw	r26, 0x07	; 7
 20a:	01 90       	ld	r0, Z+
 20c:	0d 92       	st	X+, r0
 20e:	3a 95       	dec	r19
 210:	e1 f7       	brne	.-8      	; 0x20a <extractData+0x40>
	char gpgga[] = {'G','P','G','G','A'};
 212:	35 e0       	ldi	r19, 0x05	; 5
 214:	e6 e0       	ldi	r30, 0x06	; 6
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	de 01       	movw	r26, r28
 21a:	1c 96       	adiw	r26, 0x0c	; 12
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	3a 95       	dec	r19
 222:	e1 f7       	brne	.-8      	; 0x21c <extractData+0x52>
	char temp_time[TIME_SIZE] = {'E','R','6'};
 224:	fe 01       	movw	r30, r28
 226:	71 96       	adiw	r30, 0x11	; 17
 228:	3a e0       	ldi	r19, 0x0A	; 10
 22a:	df 01       	movw	r26, r30
 22c:	1d 92       	st	X+, r1
 22e:	3a 95       	dec	r19
 230:	e9 f7       	brne	.-6      	; 0x22c <extractData+0x62>
 232:	29 8b       	std	Y+17, r18	; 0x11
 234:	9a 8b       	std	Y+18, r25	; 0x12
 236:	36 e3       	ldi	r19, 0x36	; 54
 238:	3b 8b       	std	Y+19, r19	; 0x13
	char temp_latitude[LATITUDE_SIZE] = {'E','R','1'};
 23a:	3a 96       	adiw	r30, 0x0a	; 10
 23c:	3d e0       	ldi	r19, 0x0D	; 13
 23e:	df 01       	movw	r26, r30
 240:	1d 92       	st	X+, r1
 242:	3a 95       	dec	r19
 244:	e9 f7       	brne	.-6      	; 0x240 <extractData+0x76>
 246:	2b 8f       	std	Y+27, r18	; 0x1b
 248:	9c 8f       	std	Y+28, r25	; 0x1c
 24a:	31 e3       	ldi	r19, 0x31	; 49
 24c:	3d 8f       	std	Y+29, r19	; 0x1d
	char temp_longitude[LONGITUDE_SIZE] = {'E','R','2'};
 24e:	3d 96       	adiw	r30, 0x0d	; 13
 250:	3e e0       	ldi	r19, 0x0E	; 14
 252:	df 01       	movw	r26, r30
 254:	1d 92       	st	X+, r1
 256:	3a 95       	dec	r19
 258:	e9 f7       	brne	.-6      	; 0x254 <extractData+0x8a>
 25a:	28 a7       	std	Y+40, r18	; 0x28
 25c:	99 a7       	std	Y+41, r25	; 0x29
 25e:	32 e3       	ldi	r19, 0x32	; 50
 260:	3a a7       	std	Y+42, r19	; 0x2a
	char temp_speed[SPEED_SIZE] = {'E','R','3'}; //in knots
 262:	3e 96       	adiw	r30, 0x0e	; 14
 264:	df 01       	movw	r26, r30
 266:	38 2f       	mov	r19, r24
 268:	1d 92       	st	X+, r1
 26a:	3a 95       	dec	r19
 26c:	e9 f7       	brne	.-6      	; 0x268 <extractData+0x9e>
 26e:	2e ab       	std	Y+54, r18	; 0x36
 270:	9f ab       	std	Y+55, r25	; 0x37
 272:	33 e3       	ldi	r19, 0x33	; 51
 274:	38 af       	std	Y+56, r19	; 0x38
	char temp_course[COURSE_SIZE] = {'E','R','4'};
 276:	36 96       	adiw	r30, 0x06	; 6
 278:	df 01       	movw	r26, r30
 27a:	1d 92       	st	X+, r1
 27c:	8a 95       	dec	r24
 27e:	e9 f7       	brne	.-6      	; 0x27a <extractData+0xb0>
 280:	2c af       	std	Y+60, r18	; 0x3c
 282:	9d af       	std	Y+61, r25	; 0x3d
 284:	84 e3       	ldi	r24, 0x34	; 52
 286:	8e af       	std	Y+62, r24	; 0x3e
	char temp_altitude[ALTITUDE_SIZE] = {'E','R','5'};
 288:	36 96       	adiw	r30, 0x06	; 6
 28a:	87 e0       	ldi	r24, 0x07	; 7
 28c:	df 01       	movw	r26, r30
 28e:	1d 92       	st	X+, r1
 290:	8a 95       	dec	r24
 292:	e9 f7       	brne	.-6      	; 0x28e <extractData+0xc4>
 294:	20 83       	st	Z, r18
 296:	91 83       	std	Z+1, r25	; 0x01
 298:	85 e3       	ldi	r24, 0x35	; 53
 29a:	82 83       	std	Z+2, r24	; 0x02
	char temp[TEMP_SIZE];
	char message_checksum[CHECKSUM_SIZE];
	
	if (*message_index == '$')
 29c:	fb 01       	movw	r30, r22
 29e:	80 81       	ld	r24, Z
 2a0:	84 32       	cpi	r24, 0x24	; 36
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <extractData+0xdc>
 2a4:	be c0       	rjmp	.+380    	; 0x422 <extractData+0x258>
	{		
		message_index++;
 2a6:	8b 01       	movw	r16, r22
 2a8:	0f 5f       	subi	r16, 0xFF	; 255
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
		message_index += fillCharArray(message_type, message_index, MESSEAGE_TYPE_SIZE,1);
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	46 e0       	ldi	r20, 0x06	; 6
 2b0:	b8 01       	movw	r22, r16
 2b2:	ce 01       	movw	r24, r28
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
 2ba:	08 0f       	add	r16, r24
 2bc:	11 1d       	adc	r17, r1
		if (compareCharArray(message_type, gprmc, MESSEAGE_TYPE_SIZE))
 2be:	46 e0       	ldi	r20, 0x06	; 6
 2c0:	be 01       	movw	r22, r28
 2c2:	69 5f       	subi	r22, 0xF9	; 249
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	0e 94 66 00 	call	0xcc	; 0xcc <compareCharArray>
 2ce:	88 23       	and	r24, r24
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <extractData+0x10a>
 2d2:	81 c0       	rjmp	.+258    	; 0x3d6 <extractData+0x20c>
		{
			//sample gprmc "$GPRMC,054313.80,A,4328.72490,N,08032.14223,W,0.075,,090416,,,A*68"
			message_index += fillCharArray(temp_time, message_index, TIME_SIZE,1);
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	4a e0       	ldi	r20, 0x0A	; 10
 2d8:	b8 01       	movw	r22, r16
 2da:	ce 01       	movw	r24, r28
 2dc:	41 96       	adiw	r24, 0x11	; 17
 2de:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
 2e2:	f8 01       	movw	r30, r16
 2e4:	e8 0f       	add	r30, r24
 2e6:	f1 1d       	adc	r31, r1
			if(*message_index == 'A')
 2e8:	80 81       	ld	r24, Z
 2ea:	81 34       	cpi	r24, 0x41	; 65
 2ec:	e1 f5       	brne	.+120    	; 0x366 <extractData+0x19c>
			{
				message_index += 2;
 2ee:	8f 01       	movw	r16, r30
 2f0:	0e 5f       	subi	r16, 0xFE	; 254
 2f2:	1f 4f       	sbci	r17, 0xFF	; 255
				message_index += fillCharArray(temp_latitude, message_index, LATITUDE_SIZE,2);
 2f4:	22 e0       	ldi	r18, 0x02	; 2
 2f6:	4d e0       	ldi	r20, 0x0D	; 13
 2f8:	b8 01       	movw	r22, r16
 2fa:	ce 01       	movw	r24, r28
 2fc:	4b 96       	adiw	r24, 0x1b	; 27
 2fe:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
 302:	08 0f       	add	r16, r24
 304:	11 1d       	adc	r17, r1
				message_index += fillCharArray(temp_longitude, message_index, LONGITUDE_SIZE,2);
 306:	22 e0       	ldi	r18, 0x02	; 2
 308:	4e e0       	ldi	r20, 0x0E	; 14
 30a:	b8 01       	movw	r22, r16
 30c:	ce 01       	movw	r24, r28
 30e:	88 96       	adiw	r24, 0x28	; 40
 310:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
 314:	08 0f       	add	r16, r24
 316:	11 1d       	adc	r17, r1
				message_index += fillCharArray(temp_speed, message_index, SPEED_SIZE,1);
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	46 e0       	ldi	r20, 0x06	; 6
 31c:	b8 01       	movw	r22, r16
 31e:	ce 01       	movw	r24, r28
 320:	c6 96       	adiw	r24, 0x36	; 54
 322:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
 326:	08 0f       	add	r16, r24
 328:	11 1d       	adc	r17, r1
				message_index += fillCharArray(temp_course, message_index, COURSE_SIZE,1);
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	46 e0       	ldi	r20, 0x06	; 6
 32e:	b8 01       	movw	r22, r16
 330:	ce 01       	movw	r24, r28
 332:	cc 96       	adiw	r24, 0x3c	; 60
 334:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
 338:	08 0f       	add	r16, r24
 33a:	11 1d       	adc	r17, r1
				message_index += fillCharArray(temp, message_index, TEMP_SIZE, 3);
 33c:	23 e0       	ldi	r18, 0x03	; 3
 33e:	42 e3       	ldi	r20, 0x32	; 50
 340:	b8 01       	movw	r22, r16
 342:	ce 01       	movw	r24, r28
 344:	87 5b       	subi	r24, 0xB7	; 183
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
 34c:	68 2f       	mov	r22, r24
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	6e 5f       	subi	r22, 0xFE	; 254
 352:	7f 4f       	sbci	r23, 0xFF	; 255
				message_index += 2;
 354:	60 0f       	add	r22, r16
 356:	71 1f       	adc	r23, r17
				fillCharArray(message_checksum, message_index, CHECKSUM_SIZE, 1);				
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	42 e0       	ldi	r20, 0x02	; 2
 35c:	ce 01       	movw	r24, r28
 35e:	85 58       	subi	r24, 0x85	; 133
 360:	9f 4f       	sbci	r25, 0xFF	; 255
 362:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
			printCharArray(temp_longitude, LONGITUDE_SIZE);
			printCharArray(temp_speed, SPEED_SIZE);
			printCharArray(temp_course, COURSE_SIZE);
			printCharArray(message_checksum,CHECKSUM_SIZE);
			*/
      memcpy(time, temp_time, TIME_SIZE);
 366:	8a e0       	ldi	r24, 0x0A	; 10
 368:	fe 01       	movw	r30, r28
 36a:	71 96       	adiw	r30, 0x11	; 17
 36c:	a1 e8       	ldi	r26, 0x81	; 129
 36e:	b1 e0       	ldi	r27, 0x01	; 1
 370:	01 90       	ld	r0, Z+
 372:	0d 92       	st	X+, r0
 374:	8a 95       	dec	r24
 376:	e1 f7       	brne	.-8      	; 0x370 <extractData+0x1a6>
      memcpy(latitude, temp_latitude, LATITUDE_SIZE);
 378:	8d e0       	ldi	r24, 0x0D	; 13
 37a:	fe 01       	movw	r30, r28
 37c:	7b 96       	adiw	r30, 0x1b	; 27
 37e:	ab e8       	ldi	r26, 0x8B	; 139
 380:	b1 e0       	ldi	r27, 0x01	; 1
 382:	01 90       	ld	r0, Z+
 384:	0d 92       	st	X+, r0
 386:	8a 95       	dec	r24
 388:	e1 f7       	brne	.-8      	; 0x382 <extractData+0x1b8>
      memcpy(longitude, temp_longitude, LONGITUDE_SIZE);
 38a:	8e e0       	ldi	r24, 0x0E	; 14
 38c:	fe 01       	movw	r30, r28
 38e:	b8 96       	adiw	r30, 0x28	; 40
 390:	ac e6       	ldi	r26, 0x6C	; 108
 392:	b1 e0       	ldi	r27, 0x01	; 1
 394:	01 90       	ld	r0, Z+
 396:	0d 92       	st	X+, r0
 398:	8a 95       	dec	r24
 39a:	e1 f7       	brne	.-8      	; 0x394 <extractData+0x1ca>
      memcpy(altitude, temp_altitude, ALTITUDE_SIZE);
 39c:	87 e0       	ldi	r24, 0x07	; 7
 39e:	fe 01       	movw	r30, r28
 3a0:	ee 5b       	subi	r30, 0xBE	; 190
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	aa e7       	ldi	r26, 0x7A	; 122
 3a6:	b1 e0       	ldi	r27, 0x01	; 1
 3a8:	01 90       	ld	r0, Z+
 3aa:	0d 92       	st	X+, r0
 3ac:	8a 95       	dec	r24
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <extractData+0x1de>
      memcpy(speed, temp_speed, SPEED_SIZE);
 3b0:	86 e0       	ldi	r24, 0x06	; 6
 3b2:	fe 01       	movw	r30, r28
 3b4:	f6 96       	adiw	r30, 0x36	; 54
 3b6:	a8 e9       	ldi	r26, 0x98	; 152
 3b8:	b1 e0       	ldi	r27, 0x01	; 1
 3ba:	01 90       	ld	r0, Z+
 3bc:	0d 92       	st	X+, r0
 3be:	8a 95       	dec	r24
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <extractData+0x1f0>
      memcpy(course, temp_course, COURSE_SIZE);
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	fe 01       	movw	r30, r28
 3c6:	fc 96       	adiw	r30, 0x3c	; 60
 3c8:	a6 e6       	ldi	r26, 0x66	; 102
 3ca:	b1 e0       	ldi	r27, 0x01	; 1
 3cc:	01 90       	ld	r0, Z+
 3ce:	0d 92       	st	X+, r0
 3d0:	8a 95       	dec	r24
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <extractData+0x202>
 3d4:	26 c0       	rjmp	.+76     	; 0x422 <extractData+0x258>
		}
		else if(compareCharArray(message_type,gpgga,MESSEAGE_TYPE_SIZE))
 3d6:	46 e0       	ldi	r20, 0x06	; 6
 3d8:	be 01       	movw	r22, r28
 3da:	64 5f       	subi	r22, 0xF4	; 244
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	0e 94 66 00 	call	0xcc	; 0xcc <compareCharArray>
 3e6:	88 23       	and	r24, r24
 3e8:	e1 f0       	breq	.+56     	; 0x422 <extractData+0x258>
		{
			//sample gpgga "$GPGGA,054313.80,4328.72490,N,08032.14223,W,1,09,0.97,344.8,M,-36.0,M,,*68"
			message_index += fillCharArray(temp, message_index, TEMP_SIZE, 8);
 3ea:	28 e0       	ldi	r18, 0x08	; 8
 3ec:	42 e3       	ldi	r20, 0x32	; 50
 3ee:	b8 01       	movw	r22, r16
 3f0:	ce 01       	movw	r24, r28
 3f2:	87 5b       	subi	r24, 0xB7	; 183
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
 3fa:	b8 01       	movw	r22, r16
 3fc:	68 0f       	add	r22, r24
 3fe:	71 1d       	adc	r23, r1
			fillCharArray(temp_altitude, message_index, ALTITUDE_SIZE,1);
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	47 e0       	ldi	r20, 0x07	; 7
 404:	ce 01       	movw	r24, r28
 406:	8e 5b       	subi	r24, 0xBE	; 190
 408:	9f 4f       	sbci	r25, 0xFF	; 255
 40a:	0e 94 88 00 	call	0x110	; 0x110 <fillCharArray>
			/*
			printCharArray(message_type, MESSEAGE_TYPE_SIZE);
			printCharArray(temp_altitude, ALTITUDE_SIZE);
			*/
      memcpy(altitude, temp_altitude, ALTITUDE_SIZE);
 40e:	87 e0       	ldi	r24, 0x07	; 7
 410:	fe 01       	movw	r30, r28
 412:	ee 5b       	subi	r30, 0xBE	; 190
 414:	ff 4f       	sbci	r31, 0xFF	; 255
 416:	aa e7       	ldi	r26, 0x7A	; 122
 418:	b1 e0       	ldi	r27, 0x01	; 1
 41a:	01 90       	ld	r0, Z+
 41c:	0d 92       	st	X+, r0
 41e:	8a 95       	dec	r24
 420:	e1 f7       	brne	.-8      	; 0x41a <extractData+0x250>
		}
	}
  
	
}
 422:	c4 58       	subi	r28, 0x84	; 132
 424:	df 4f       	sbci	r29, 0xFF	; 255
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	08 95       	ret

0000043a <__vector_18>:

ISR(USART_RX_vect)
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
	cli();
 45c:	f8 94       	cli
	char temp = UDR0;
 45e:	90 91 c6 00 	lds	r25, 0x00C6
	if (temp == '\n')
 462:	9a 30       	cpi	r25, 0x0A	; 10
 464:	91 f4       	brne	.+36     	; 0x48a <__vector_18+0x50>
	{
		received_data[usart_index] = temp;
 466:	e0 91 0c 01 	lds	r30, 0x010C
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	ea 5e       	subi	r30, 0xEA	; 234
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	8a e0       	ldi	r24, 0x0A	; 10
 472:	80 83       	st	Z, r24
		usart_index = 0;
 474:	10 92 0c 01 	sts	0x010C, r1
		sei();
 478:	78 94       	sei
		extractData(first_char);
 47a:	86 e1       	ldi	r24, 0x16	; 22
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <extractData>
		data_is_ready = 1;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	80 93 15 01 	sts	0x0115, r24
 488:	0c c0       	rjmp	.+24     	; 0x4a2 <__vector_18+0x68>
	}
	else
	{
		data_is_ready = 0;
 48a:	10 92 15 01 	sts	0x0115, r1
		received_data[usart_index] = temp;
 48e:	80 91 0c 01 	lds	r24, 0x010C
 492:	e8 2f       	mov	r30, r24
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	ea 5e       	subi	r30, 0xEA	; 234
 498:	fe 4f       	sbci	r31, 0xFE	; 254
 49a:	90 83       	st	Z, r25
		usart_index++;
 49c:	8f 5f       	subi	r24, 0xFF	; 255
 49e:	80 93 0c 01 	sts	0x010C, r24
	}
	sei();
 4a2:	78 94       	sei
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <main>:
 * Author : Toni
 */ 
#include "initialization.h"

int main(void)
{
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	1f 92       	push	r1
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
	// initialize as slave
	USART_Init(MYUBRR);
 4d0:	83 e3       	ldi	r24, 0x33	; 51
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
		
	// Own TWI slave address
	TWI_slaveAddress = 0x10;
	
	// Initialize TWI module for slave operation. Include address and/or enable General Call.
	TWI_Slave_Initialise( (unsigned char)((TWI_slaveAddress<<TWI_ADR_BITS) | (TRUE<<TWI_GEN_BIT) ));
 4d8:	81 e2       	ldi	r24, 0x21	; 33
 4da:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_Slave_Initialise>
	// Start the TWI transceiver to enable reception of the first command from the TWI Master.
	sei();
 4de:	78 94       	sei
	TWI_Start_Transceiver();
 4e0:	0e 94 02 03 	call	0x604	; 0x604 <TWI_Start_Transceiver>
  char temp = 'i';
 4e4:	89 e6       	ldi	r24, 0x69	; 105
 4e6:	89 83       	std	Y+1, r24	; 0x01
	
	while (1) 
  {
		if ( !TWI_Transceiver_Busy() )
 4e8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <TWI_Transceiver_Busy>
 4ec:	81 11       	cpse	r24, r1
 4ee:	fc cf       	rjmp	.-8      	; 0x4e8 <main+0x22>
		{
			if ( TWI_statusReg.RxDataInBuf )
 4f0:	80 91 0e 01 	lds	r24, 0x010E
 4f4:	81 ff       	sbrs	r24, 1
 4f6:	f8 cf       	rjmp	.-16     	; 0x4e8 <main+0x22>
			{
				TWI_Get_Data_From_Transceiver(&temp, 1); 
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	ce 01       	movw	r24, r28
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	0e 94 11 03 	call	0x622	; 0x622 <TWI_Get_Data_From_Transceiver>
				switch (temp)
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	83 36       	cpi	r24, 0x63	; 99
 506:	11 f1       	breq	.+68     	; 0x54c <main+0x86>
 508:	28 f4       	brcc	.+10     	; 0x514 <main+0x4e>
 50a:	81 36       	cpi	r24, 0x61	; 97
 50c:	49 f0       	breq	.+18     	; 0x520 <main+0x5a>
 50e:	82 36       	cpi	r24, 0x62	; 98
 510:	91 f0       	breq	.+36     	; 0x536 <main+0x70>
 512:	48 c0       	rjmp	.+144    	; 0x5a4 <main+0xde>
 514:	85 36       	cpi	r24, 0x65	; 101
 516:	81 f1       	breq	.+96     	; 0x578 <main+0xb2>
 518:	20 f1       	brcs	.+72     	; 0x562 <main+0x9c>
 51a:	86 36       	cpi	r24, 0x66	; 102
 51c:	c1 f1       	breq	.+112    	; 0x58e <main+0xc8>
 51e:	42 c0       	rjmp	.+132    	; 0x5a4 <main+0xde>
				{
					//a for latitude
					case 'a':
						TWI_Start_Transceiver_With_Data(latitude, LATITUDE_SIZE);
 520:	6d e0       	ldi	r22, 0x0D	; 13
 522:	8b e8       	ldi	r24, 0x8B	; 139
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TWI_Start_Transceiver_With_Data>
						printCharArray(latitude,LATITUDE_SIZE);
 52a:	6d e0       	ldi	r22, 0x0D	; 13
 52c:	8b e8       	ldi	r24, 0x8B	; 139
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 c9 00 	call	0x192	; 0x192 <printCharArray>
						break;
 534:	d9 cf       	rjmp	.-78     	; 0x4e8 <main+0x22>
					//b for longitude
					case 'b':
						TWI_Start_Transceiver_With_Data(longitude, LONGITUDE_SIZE);
 536:	6e e0       	ldi	r22, 0x0E	; 14
 538:	8c e6       	ldi	r24, 0x6C	; 108
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TWI_Start_Transceiver_With_Data>
						printCharArray(longitude,LONGITUDE_SIZE);
 540:	6e e0       	ldi	r22, 0x0E	; 14
 542:	8c e6       	ldi	r24, 0x6C	; 108
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 c9 00 	call	0x192	; 0x192 <printCharArray>
						break;
 54a:	ce cf       	rjmp	.-100    	; 0x4e8 <main+0x22>
					//c for time
					case 'c':
						TWI_Start_Transceiver_With_Data(time, TIME_SIZE);
 54c:	6a e0       	ldi	r22, 0x0A	; 10
 54e:	81 e8       	ldi	r24, 0x81	; 129
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TWI_Start_Transceiver_With_Data>
						printCharArray(time, TIME_SIZE);
 556:	6a e0       	ldi	r22, 0x0A	; 10
 558:	81 e8       	ldi	r24, 0x81	; 129
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 c9 00 	call	0x192	; 0x192 <printCharArray>
						break;
 560:	c3 cf       	rjmp	.-122    	; 0x4e8 <main+0x22>
					//d for speed
					case 'd':
						TWI_Start_Transceiver_With_Data(speed, SPEED_SIZE);
 562:	66 e0       	ldi	r22, 0x06	; 6
 564:	88 e9       	ldi	r24, 0x98	; 152
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TWI_Start_Transceiver_With_Data>
						printCharArray(speed, SPEED_SIZE);
 56c:	66 e0       	ldi	r22, 0x06	; 6
 56e:	88 e9       	ldi	r24, 0x98	; 152
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	0e 94 c9 00 	call	0x192	; 0x192 <printCharArray>
						break;
 576:	b8 cf       	rjmp	.-144    	; 0x4e8 <main+0x22>
					//e for course
					case 'e':
						TWI_Start_Transceiver_With_Data(course, COURSE_SIZE);
 578:	66 e0       	ldi	r22, 0x06	; 6
 57a:	86 e6       	ldi	r24, 0x66	; 102
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TWI_Start_Transceiver_With_Data>
						printCharArray(course, COURSE_SIZE);
 582:	66 e0       	ldi	r22, 0x06	; 6
 584:	86 e6       	ldi	r24, 0x66	; 102
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	0e 94 c9 00 	call	0x192	; 0x192 <printCharArray>
						break;
 58c:	ad cf       	rjmp	.-166    	; 0x4e8 <main+0x22>
					//f for altitude
					case 'f':
						TWI_Start_Transceiver_With_Data(altitude, ALTITUDE_SIZE);
 58e:	67 e0       	ldi	r22, 0x07	; 7
 590:	8a e7       	ldi	r24, 0x7A	; 122
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TWI_Start_Transceiver_With_Data>
						printCharArray(altitude, ALTITUDE_SIZE);
 598:	67 e0       	ldi	r22, 0x07	; 7
 59a:	8a e7       	ldi	r24, 0x7A	; 122
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 c9 00 	call	0x192	; 0x192 <printCharArray>
						break;
 5a2:	a2 cf       	rjmp	.-188    	; 0x4e8 <main+0x22>
					default:
            TWI_Start_Transceiver_With_Data(altitude, ALTITUDE_SIZE);
 5a4:	67 e0       	ldi	r22, 0x07	; 7
 5a6:	8a e7       	ldi	r24, 0x7A	; 122
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TWI_Start_Transceiver_With_Data>
						break;
 5ae:	9c cf       	rjmp	.-200    	; 0x4e8 <main+0x22>

000005b0 <TWI_Slave_Initialise>:
 5b0:	80 93 ba 00 	sts	0x00BA, r24
 5b4:	84 e0       	ldi	r24, 0x04	; 4
 5b6:	80 93 bc 00 	sts	0x00BC, r24
 5ba:	10 92 0f 01 	sts	0x010F, r1
 5be:	08 95       	ret

000005c0 <TWI_Transceiver_Busy>:
 5c0:	80 91 0f 01 	lds	r24, 0x010F
 5c4:	08 95       	ret

000005c6 <TWI_Start_Transceiver_With_Data>:
 5c6:	20 91 0f 01 	lds	r18, 0x010F
 5ca:	21 11       	cpse	r18, r1
 5cc:	fc cf       	rjmp	.-8      	; 0x5c6 <TWI_Start_Transceiver_With_Data>
 5ce:	60 93 10 01 	sts	0x0110, r22
 5d2:	66 23       	and	r22, r22
 5d4:	59 f0       	breq	.+22     	; 0x5ec <TWI_Start_Transceiver_With_Data+0x26>
 5d6:	28 2f       	mov	r18, r24
 5d8:	a1 e1       	ldi	r26, 0x11	; 17
 5da:	b1 e0       	ldi	r27, 0x01	; 1
 5dc:	e8 2f       	mov	r30, r24
 5de:	f9 2f       	mov	r31, r25
 5e0:	81 91       	ld	r24, Z+
 5e2:	8d 93       	st	X+, r24
 5e4:	8e 2f       	mov	r24, r30
 5e6:	82 1b       	sub	r24, r18
 5e8:	86 17       	cp	r24, r22
 5ea:	d0 f3       	brcs	.-12     	; 0x5e0 <TWI_Start_Transceiver_With_Data+0x1a>
 5ec:	10 92 0e 01 	sts	0x010E, r1
 5f0:	88 ef       	ldi	r24, 0xF8	; 248
 5f2:	80 93 00 01 	sts	0x0100, r24
 5f6:	85 ec       	ldi	r24, 0xC5	; 197
 5f8:	80 93 bc 00 	sts	0x00BC, r24
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 0f 01 	sts	0x010F, r24
 602:	08 95       	ret

00000604 <TWI_Start_Transceiver>:
 604:	80 91 0f 01 	lds	r24, 0x010F
 608:	81 11       	cpse	r24, r1
 60a:	fc cf       	rjmp	.-8      	; 0x604 <TWI_Start_Transceiver>
 60c:	10 92 0e 01 	sts	0x010E, r1
 610:	88 ef       	ldi	r24, 0xF8	; 248
 612:	80 93 00 01 	sts	0x0100, r24
 616:	85 ec       	ldi	r24, 0xC5	; 197
 618:	80 93 bc 00 	sts	0x00BC, r24
 61c:	10 92 0f 01 	sts	0x010F, r1
 620:	08 95       	ret

00000622 <TWI_Get_Data_From_Transceiver>:
 622:	20 91 0f 01 	lds	r18, 0x010F
 626:	21 11       	cpse	r18, r1
 628:	fc cf       	rjmp	.-8      	; 0x622 <TWI_Get_Data_From_Transceiver>
 62a:	20 91 0e 01 	lds	r18, 0x010E
 62e:	20 ff       	sbrs	r18, 0
 630:	12 c0       	rjmp	.+36     	; 0x656 <TWI_Get_Data_From_Transceiver+0x34>
 632:	66 23       	and	r22, r22
 634:	59 f0       	breq	.+22     	; 0x64c <TWI_Get_Data_From_Transceiver+0x2a>
 636:	21 e1       	ldi	r18, 0x11	; 17
 638:	31 e0       	ldi	r19, 0x01	; 1
 63a:	a8 2f       	mov	r26, r24
 63c:	b9 2f       	mov	r27, r25
 63e:	f9 01       	movw	r30, r18
 640:	81 91       	ld	r24, Z+
 642:	8d 93       	st	X+, r24
 644:	8e 2f       	mov	r24, r30
 646:	82 1b       	sub	r24, r18
 648:	86 17       	cp	r24, r22
 64a:	d0 f3       	brcs	.-12     	; 0x640 <TWI_Get_Data_From_Transceiver+0x1e>
 64c:	80 91 0e 01 	lds	r24, 0x010E
 650:	8d 7f       	andi	r24, 0xFD	; 253
 652:	80 93 0e 01 	sts	0x010E, r24
 656:	80 91 0e 01 	lds	r24, 0x010E
 65a:	81 70       	andi	r24, 0x01	; 1
 65c:	08 95       	ret

0000065e <__vector_24>:
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	ef 93       	push	r30
 66e:	ff 93       	push	r31
 670:	80 91 b9 00 	lds	r24, 0x00B9
 674:	80 39       	cpi	r24, 0x90	; 144
 676:	09 f4       	brne	.+2      	; 0x67a <__vector_24+0x1c>
 678:	63 c0       	rjmp	.+198    	; 0x740 <__vector_24+0xe2>
 67a:	90 f4       	brcc	.+36     	; 0x6a0 <__vector_24+0x42>
 67c:	80 37       	cpi	r24, 0x70	; 112
 67e:	09 f4       	brne	.+2      	; 0x682 <__vector_24+0x24>
 680:	4c c0       	rjmp	.+152    	; 0x71a <__vector_24+0xbc>
 682:	38 f4       	brcc	.+14     	; 0x692 <__vector_24+0x34>
 684:	88 23       	and	r24, r24
 686:	09 f4       	brne	.+2      	; 0x68a <__vector_24+0x2c>
 688:	79 c0       	rjmp	.+242    	; 0x77c <__vector_24+0x11e>
 68a:	80 36       	cpi	r24, 0x60	; 96
 68c:	09 f4       	brne	.+2      	; 0x690 <__vector_24+0x32>
 68e:	4a c0       	rjmp	.+148    	; 0x724 <__vector_24+0xc6>
 690:	7d c0       	rjmp	.+250    	; 0x78c <__vector_24+0x12e>
 692:	80 38       	cpi	r24, 0x80	; 128
 694:	09 f4       	brne	.+2      	; 0x698 <__vector_24+0x3a>
 696:	54 c0       	rjmp	.+168    	; 0x740 <__vector_24+0xe2>
 698:	88 38       	cpi	r24, 0x88	; 136
 69a:	09 f4       	brne	.+2      	; 0x69e <__vector_24+0x40>
 69c:	6f c0       	rjmp	.+222    	; 0x77c <__vector_24+0x11e>
 69e:	76 c0       	rjmp	.+236    	; 0x78c <__vector_24+0x12e>
 6a0:	88 3a       	cpi	r24, 0xA8	; 168
 6a2:	81 f0       	breq	.+32     	; 0x6c4 <__vector_24+0x66>
 6a4:	38 f4       	brcc	.+14     	; 0x6b4 <__vector_24+0x56>
 6a6:	88 39       	cpi	r24, 0x98	; 152
 6a8:	09 f4       	brne	.+2      	; 0x6ac <__vector_24+0x4e>
 6aa:	68 c0       	rjmp	.+208    	; 0x77c <__vector_24+0x11e>
 6ac:	80 3a       	cpi	r24, 0xA0	; 160
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <__vector_24+0x54>
 6b0:	5f c0       	rjmp	.+190    	; 0x770 <__vector_24+0x112>
 6b2:	6c c0       	rjmp	.+216    	; 0x78c <__vector_24+0x12e>
 6b4:	80 3c       	cpi	r24, 0xC0	; 192
 6b6:	d9 f0       	breq	.+54     	; 0x6ee <__vector_24+0x90>
 6b8:	88 3c       	cpi	r24, 0xC8	; 200
 6ba:	09 f4       	brne	.+2      	; 0x6be <__vector_24+0x60>
 6bc:	5f c0       	rjmp	.+190    	; 0x77c <__vector_24+0x11e>
 6be:	88 3b       	cpi	r24, 0xB8	; 184
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <__vector_24+0x6a>
 6c2:	64 c0       	rjmp	.+200    	; 0x78c <__vector_24+0x12e>
 6c4:	10 92 0d 01 	sts	0x010D, r1
 6c8:	e0 91 0d 01 	lds	r30, 0x010D
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	8e 0f       	add	r24, r30
 6d0:	80 93 0d 01 	sts	0x010D, r24
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	ef 5e       	subi	r30, 0xEF	; 239
 6d8:	fe 4f       	sbci	r31, 0xFE	; 254
 6da:	80 81       	ld	r24, Z
 6dc:	80 93 bb 00 	sts	0x00BB, r24
 6e0:	85 ec       	ldi	r24, 0xC5	; 197
 6e2:	80 93 bc 00 	sts	0x00BC, r24
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	80 93 0f 01 	sts	0x010F, r24
 6ec:	58 c0       	rjmp	.+176    	; 0x79e <__vector_24+0x140>
 6ee:	90 91 0d 01 	lds	r25, 0x010D
 6f2:	80 91 10 01 	lds	r24, 0x0110
 6f6:	98 13       	cpse	r25, r24
 6f8:	06 c0       	rjmp	.+12     	; 0x706 <__vector_24+0xa8>
 6fa:	80 91 0e 01 	lds	r24, 0x010E
 6fe:	81 60       	ori	r24, 0x01	; 1
 700:	80 93 0e 01 	sts	0x010E, r24
 704:	04 c0       	rjmp	.+8      	; 0x70e <__vector_24+0xb0>
 706:	80 91 b9 00 	lds	r24, 0x00B9
 70a:	80 93 00 01 	sts	0x0100, r24
 70e:	85 ec       	ldi	r24, 0xC5	; 197
 710:	80 93 bc 00 	sts	0x00BC, r24
 714:	10 92 0f 01 	sts	0x010F, r1
 718:	42 c0       	rjmp	.+132    	; 0x79e <__vector_24+0x140>
 71a:	80 91 0e 01 	lds	r24, 0x010E
 71e:	84 60       	ori	r24, 0x04	; 4
 720:	80 93 0e 01 	sts	0x010E, r24
 724:	80 91 0e 01 	lds	r24, 0x010E
 728:	82 60       	ori	r24, 0x02	; 2
 72a:	80 93 0e 01 	sts	0x010E, r24
 72e:	10 92 0d 01 	sts	0x010D, r1
 732:	85 ec       	ldi	r24, 0xC5	; 197
 734:	80 93 bc 00 	sts	0x00BC, r24
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	80 93 0f 01 	sts	0x010F, r24
 73e:	2f c0       	rjmp	.+94     	; 0x79e <__vector_24+0x140>
 740:	e0 91 0d 01 	lds	r30, 0x010D
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	8e 0f       	add	r24, r30
 748:	80 93 0d 01 	sts	0x010D, r24
 74c:	80 91 bb 00 	lds	r24, 0x00BB
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	ef 5e       	subi	r30, 0xEF	; 239
 754:	fe 4f       	sbci	r31, 0xFE	; 254
 756:	80 83       	st	Z, r24
 758:	80 91 0e 01 	lds	r24, 0x010E
 75c:	81 60       	ori	r24, 0x01	; 1
 75e:	80 93 0e 01 	sts	0x010E, r24
 762:	85 ec       	ldi	r24, 0xC5	; 197
 764:	80 93 bc 00 	sts	0x00BC, r24
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	80 93 0f 01 	sts	0x010F, r24
 76e:	17 c0       	rjmp	.+46     	; 0x79e <__vector_24+0x140>
 770:	85 ec       	ldi	r24, 0xC5	; 197
 772:	80 93 bc 00 	sts	0x00BC, r24
 776:	10 92 0f 01 	sts	0x010F, r1
 77a:	11 c0       	rjmp	.+34     	; 0x79e <__vector_24+0x140>
 77c:	80 91 b9 00 	lds	r24, 0x00B9
 780:	80 93 00 01 	sts	0x0100, r24
 784:	80 e9       	ldi	r24, 0x90	; 144
 786:	80 93 bc 00 	sts	0x00BC, r24
 78a:	09 c0       	rjmp	.+18     	; 0x79e <__vector_24+0x140>
 78c:	80 91 b9 00 	lds	r24, 0x00B9
 790:	80 93 00 01 	sts	0x0100, r24
 794:	85 ec       	ldi	r24, 0xC5	; 197
 796:	80 93 bc 00 	sts	0x00BC, r24
 79a:	10 92 0f 01 	sts	0x010F, r1
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	9f 91       	pop	r25
 7a4:	8f 91       	pop	r24
 7a6:	0f 90       	pop	r0
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	0f 90       	pop	r0
 7ac:	1f 90       	pop	r1
 7ae:	18 95       	reti

000007b0 <__umulhisi3>:
 7b0:	a2 9f       	mul	r26, r18
 7b2:	b0 01       	movw	r22, r0
 7b4:	b3 9f       	mul	r27, r19
 7b6:	c0 01       	movw	r24, r0
 7b8:	a3 9f       	mul	r26, r19
 7ba:	70 0d       	add	r23, r0
 7bc:	81 1d       	adc	r24, r1
 7be:	11 24       	eor	r1, r1
 7c0:	91 1d       	adc	r25, r1
 7c2:	b2 9f       	mul	r27, r18
 7c4:	70 0d       	add	r23, r0
 7c6:	81 1d       	adc	r24, r1
 7c8:	11 24       	eor	r1, r1
 7ca:	91 1d       	adc	r25, r1
 7cc:	08 95       	ret

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>

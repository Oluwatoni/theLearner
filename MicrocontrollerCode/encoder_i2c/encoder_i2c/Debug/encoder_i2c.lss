
encoder_i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  00800060  00800060  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083d  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fd  00000000  00000000  000012a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000188  00000000  00000000  00001d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001ef1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	6d c0       	rjmp	.+218    	; 0xe4 <__vector_4>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	c2 c0       	rjmp	.+388    	; 0x1a0 <__vector_13>
  1c:	dd c0       	rjmp	.+442    	; 0x1d8 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a9 39       	cpi	r26, 0x99	; 153
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	53 c1       	rjmp	.+678    	; 0x2e4 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
	PCMSK &= 0;
}

//attach pin interrupt to PB4  
int main(void){
	cli();
  40:	f8 94       	cli
	uint8_t pulse_count;
	uint16_t dt;
}pulses;
	
inline void activate_PB4_interrupt(){
	GIMSK |= 0b00100000;
  42:	8b b7       	in	r24, 0x3b	; 59
  44:	80 62       	ori	r24, 0x20	; 32
  46:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= 0b00010000;
  48:	ac 9a       	sbi	0x15, 4	; 21
	cli();
    //PB4 change interrupt setup 
	activate_PB4_interrupt();

//	set pin as an input pin might remove doesn't change much
	PORTB |= (0 << PB4);
  4a:	88 b3       	in	r24, 0x18	; 24
  4c:	88 bb       	out	0x18, r24	; 24
	DDRB |= (0 << DDB4);
  4e:	87 b3       	in	r24, 0x17	; 23
  50:	87 bb       	out	0x17, r24	; 23
	
	//set up timer
	TCCR1 |= (1 << 2);
  52:	80 b7       	in	r24, 0x30	; 48
  54:	84 60       	ori	r24, 0x04	; 4
  56:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE1);
  58:	89 b7       	in	r24, 0x39	; 57
  5a:	84 60       	ori	r24, 0x04	; 4
  5c:	89 bf       	out	0x39, r24	; 57
	
	pulses.pulse_count = 0;
  5e:	e6 e9       	ldi	r30, 0x96	; 150
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	10 82       	st	Z, r1
	pulses.dt = 0;
  64:	12 82       	std	Z+2, r1	; 0x02
  66:	11 82       	std	Z+1, r1	; 0x01
	usiTwiSlaveInit(SLAVE_ADDRESS);
  68:	87 e0       	ldi	r24, 0x07	; 7
  6a:	59 d0       	rcall	.+178    	; 0x11e <usiTwiSlaveInit>
	sei();
  6c:	78 94       	sei
		if(usiTwiDataInReceiveBuffer()){
			switch(usiTwiReceiveByte()){
				case 'r':
					deactivate_PB4_interrupt();
					TIMSK &= 0;
					usiTwiTransmitByte(pulses.pulse_count);
  6e:	c6 e9       	ldi	r28, 0x96	; 150
  70:	d0 e0       	ldi	r29, 0x00	; 0
	pulses.dt = 0;
	usiTwiSlaveInit(SLAVE_ADDRESS);
	sei();
	
    while (1){
		if(usiTwiDataInReceiveBuffer()){
  72:	8d d0       	rcall	.+282    	; 0x18e <usiTwiDataInReceiveBuffer>
  74:	88 23       	and	r24, r24
  76:	e9 f3       	breq	.-6      	; 0x72 <main+0x32>
			switch(usiTwiReceiveByte()){
  78:	77 d0       	rcall	.+238    	; 0x168 <usiTwiReceiveByte>
  7a:	82 37       	cpi	r24, 0x72	; 114
  7c:	d1 f7       	brne	.-12     	; 0x72 <main+0x32>
	GIMSK |= 0b00100000;
	PCMSK |= 0b00010000;
}

inline void deactivate_PB4_interrupt(){
	GIMSK &= 0;
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	1b be       	out	0x3b, r1	; 59
	PCMSK &= 0;
  82:	85 b3       	in	r24, 0x15	; 21
  84:	15 ba       	out	0x15, r1	; 21
    while (1){
		if(usiTwiDataInReceiveBuffer()){
			switch(usiTwiReceiveByte()){
				case 'r':
					deactivate_PB4_interrupt();
					TIMSK &= 0;
  86:	89 b7       	in	r24, 0x39	; 57
  88:	19 be       	out	0x39, r1	; 57
					usiTwiTransmitByte(pulses.pulse_count);
  8a:	88 81       	ld	r24, Y
  8c:	5d d0       	rcall	.+186    	; 0x148 <usiTwiTransmitByte>
					usiTwiTransmitByte(pulses.pulse_count);
  8e:	88 81       	ld	r24, Y
  90:	5b d0       	rcall	.+182    	; 0x148 <usiTwiTransmitByte>
					usiTwiTransmitByte(pulses.dt >> 8);
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	89 2f       	mov	r24, r25
  98:	57 d0       	rcall	.+174    	; 0x148 <usiTwiTransmitByte>
					usiTwiTransmitByte(pulses.dt & 0xFF);
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	9a 81       	ldd	r25, Y+2	; 0x02
  9e:	54 d0       	rcall	.+168    	; 0x148 <usiTwiTransmitByte>
					pulses.pulse_count = 0;
  a0:	18 82       	st	Y, r1
					pulses.dt = 0;
  a2:	1a 82       	std	Y+2, r1	; 0x02
  a4:	19 82       	std	Y+1, r1	; 0x01
	uint8_t pulse_count;
	uint16_t dt;
}pulses;
	
inline void activate_PB4_interrupt(){
	GIMSK |= 0b00100000;
  a6:	8b b7       	in	r24, 0x3b	; 59
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= 0b00010000;
  ac:	ac 9a       	sbi	0x15, 4	; 21
					usiTwiTransmitByte(pulses.dt >> 8);
					usiTwiTransmitByte(pulses.dt & 0xFF);
					pulses.pulse_count = 0;
					pulses.dt = 0;
					activate_PB4_interrupt();
					TIMSK |= (1 << TOIE1);
  ae:	89 b7       	in	r24, 0x39	; 57
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	89 bf       	out	0x39, r24	; 57
					break;
  b4:	de cf       	rjmp	.-68     	; 0x72 <main+0x32>

000000b6 <__vector_2>:
			}
		}
	}
}

ISR(PCINT0_vect){
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	cli();
  c6:	f8 94       	cli
	pulses.pulse_count++;
  c8:	e6 e9       	ldi	r30, 0x96	; 150
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 83       	st	Z, r24
	sei();
  d2:	78 94       	sei
}
  d4:	ff 91       	pop	r31
  d6:	ef 91       	pop	r30
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_4>:

ISR(TIM1_OVF_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	//F_CLK/(Prescaler)*(256-Timer preset)
	TCNT1 = 156;
  f6:	8c e9       	ldi	r24, 0x9C	; 156
  f8:	8f bd       	out	0x2f, r24	; 47
	cli();
  fa:	f8 94       	cli
	pulses.dt++;
  fc:	e6 e9       	ldi	r30, 0x96	; 150
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	92 81       	ldd	r25, Z+2	; 0x02
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	92 83       	std	Z+2, r25	; 0x02
 108:	81 83       	std	Z+1, r24	; 0x01
	sei();
 10a:	78 94       	sei
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <usiTwiSlaveInit>:
usiTwiSlaveInit(
  uint8_t ownAddress
)
{

  slaveAddress = ownAddress;
 11e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
 122:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <rxTail>
  rxHead = 0;
 126:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <rxHead>
  txTail = 0;
 12a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <txTail>
  txHead = 0;
 12e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <txHead>
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 132:	87 b3       	in	r24, 0x17	; 23
 134:	85 60       	ori	r24, 0x05	; 5
 136:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 138:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 13a:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 13c:	b8 98       	cbi	0x17, 0	; 23

  USICR =
 13e:	88 ea       	ldi	r24, 0xA8	; 168
 140:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
 142:	80 ef       	ldi	r24, 0xF0	; 240
 144:	8e b9       	out	0x0e, r24	; 14
 146:	08 95       	ret

00000148 <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 148:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <txHead>
 14c:	2f 5f       	subi	r18, 0xFF	; 255
 14e:	2f 71       	andi	r18, 0x1F	; 31

  // wait for free space in buffer
  while ( tmphead == txTail );
 150:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <txTail>
 154:	29 17       	cp	r18, r25
 156:	e1 f3       	breq	.-8      	; 0x150 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
 158:	e2 2f       	mov	r30, r18
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ed 59       	subi	r30, 0x9D	; 157
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
 162:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <txHead>
 166:	08 95       	ret

00000168 <usiTwiReceiveByte>:
  void
)
{

  // wait for Rx data
  while ( rxHead == rxTail );
 168:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <rxHead>
 16c:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <rxTail>
 170:	98 17       	cp	r25, r24
 172:	d1 f3       	breq	.-12     	; 0x168 <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 174:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <rxTail>
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <rxTail>

  // return data from the buffer.
  return rxBuf[ rxTail ];
 180:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <rxTail>
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	eb 57       	subi	r30, 0x7B	; 123
 188:	ff 4f       	sbci	r31, 0xFF	; 255

} // end usiTwiReceiveByte
 18a:	80 81       	ld	r24, Z
 18c:	08 95       	ret

0000018e <usiTwiDataInReceiveBuffer>:
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
 18e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <rxHead>
 192:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <rxTail>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	29 13       	cpse	r18, r25
 19a:	01 c0       	rjmp	.+2      	; 0x19e <usiTwiDataInReceiveBuffer+0x10>
 19c:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
 19e:	08 95       	ret

000001a0 <__vector_13>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 1ac:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <overflowState>

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 1b0:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 1b2:	b2 9b       	sbis	0x16, 2	; 22
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__vector_13+0x1a>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 1b6:	b0 9b       	sbis	0x16, 0	; 22
 1b8:	fc cf       	rjmp	.-8      	; 0x1b2 <__vector_13+0x12>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 1ba:	b0 99       	sbic	0x16, 0	; 22
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <__vector_13+0x24>
  {

    // a Stop Condition did not occur

    USICR =
 1be:	88 ef       	ldi	r24, 0xF8	; 248
 1c0:	8d b9       	out	0x0d, r24	; 13
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__vector_13+0x28>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 1c4:	88 ea       	ldi	r24, 0xA8	; 168
 1c6:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 1c8:	80 ef       	ldi	r24, 0xF0	; 240
 1ca:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

} // end ISR( USI_START_VECTOR )
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_14>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31

  switch ( overflowState )
 1ea:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <overflowState>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <__vector_14+0x1c>
 1f2:	4c c0       	rjmp	.+152    	; 0x28c <__stack+0x2d>
 1f4:	28 f4       	brcc	.+10     	; 0x200 <__vector_14+0x28>
 1f6:	88 23       	and	r24, r24
 1f8:	59 f0       	breq	.+22     	; 0x210 <__vector_14+0x38>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	69 f1       	breq	.+90     	; 0x258 <__vector_14+0x80>
 1fe:	69 c0       	rjmp	.+210    	; 0x2d2 <__stack+0x73>
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	09 f4       	brne	.+2      	; 0x206 <__vector_14+0x2e>
 204:	4b c0       	rjmp	.+150    	; 0x29c <__stack+0x3d>
 206:	00 f1       	brcs	.+64     	; 0x248 <__vector_14+0x70>
 208:	85 30       	cpi	r24, 0x05	; 5
 20a:	09 f4       	brne	.+2      	; 0x20e <__vector_14+0x36>
 20c:	4e c0       	rjmp	.+156    	; 0x2aa <__stack+0x4b>
 20e:	61 c0       	rjmp	.+194    	; 0x2d2 <__stack+0x73>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 210:	8f b1       	in	r24, 0x0f	; 15
 212:	88 23       	and	r24, r24
 214:	31 f0       	breq	.+12     	; 0x222 <__vector_14+0x4a>
 216:	8f b1       	in	r24, 0x0f	; 15
 218:	86 95       	lsr	r24
 21a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 21e:	89 13       	cpse	r24, r25
 220:	0e c0       	rjmp	.+28     	; 0x23e <__vector_14+0x66>
      {
          if ( USIDR & 0x01 )
 222:	78 9b       	sbis	0x0f, 0	; 15
 224:	04 c0       	rjmp	.+8      	; 0x22e <__vector_14+0x56>
        {
          overflowState = USI_SLAVE_SEND_DATA;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
 22c:	03 c0       	rjmp	.+6      	; 0x234 <__vector_14+0x5c>
        }
        else
        {
          overflowState = USI_SLAVE_REQUEST_DATA;
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
        } // end if
        SET_USI_TO_SEND_ACK( );
 234:	1f b8       	out	0x0f, r1	; 15
 236:	b8 9a       	sbi	0x17, 0	; 23
 238:	8e e7       	ldi	r24, 0x7E	; 126
 23a:	8e b9       	out	0x0e, r24	; 14
 23c:	4a c0       	rjmp	.+148    	; 0x2d2 <__stack+0x73>
      }
      else
      {
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 23e:	88 ea       	ldi	r24, 0xA8	; 168
 240:	8d b9       	out	0x0d, r24	; 13
 242:	80 e7       	ldi	r24, 0x70	; 112
 244:	8e b9       	out	0x0e, r24	; 14
 246:	45 c0       	rjmp	.+138    	; 0x2d2 <__stack+0x73>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 248:	8f b1       	in	r24, 0x0f	; 15
 24a:	88 23       	and	r24, r24
 24c:	29 f0       	breq	.+10     	; 0x258 <__vector_14+0x80>
      {
        // if NACK, the master does not want more data
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 24e:	88 ea       	ldi	r24, 0xA8	; 168
 250:	8d b9       	out	0x0d, r24	; 13
 252:	80 e7       	ldi	r24, 0x70	; 112
 254:	8e b9       	out	0x0e, r24	; 14
        return;
 256:	3d c0       	rjmp	.+122    	; 0x2d2 <__stack+0x73>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 258:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <txHead>
 25c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <txTail>
 260:	98 17       	cp	r25, r24
 262:	b9 f1       	breq	.+110    	; 0x2d2 <__stack+0x73>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 264:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <txTail>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	8f 71       	andi	r24, 0x1F	; 31
 26c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <txTail>
        USIDR = txBuf[ txTail ];
 270:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <txTail>
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ed 59       	subi	r30, 0x9D	; 157
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	80 81       	ld	r24, Z
 27c:	8f b9       	out	0x0f, r24	; 15
		// before.

        //SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
      SET_USI_TO_SEND_DATA( );
 284:	b8 9a       	sbi	0x17, 0	; 23
 286:	80 e7       	ldi	r24, 0x70	; 112
 288:	8e b9       	out	0x0e, r24	; 14
      break;
 28a:	23 c0       	rjmp	.+70     	; 0x2d2 <__stack+0x73>

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
      SET_USI_TO_READ_ACK( );
 292:	b8 98       	cbi	0x17, 0	; 23
 294:	1f b8       	out	0x0f, r1	; 15
 296:	8e e7       	ldi	r24, 0x7E	; 126
 298:	8e b9       	out	0x0e, r24	; 14
      break;
 29a:	1b c0       	rjmp	.+54     	; 0x2d2 <__stack+0x73>

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 29c:	85 e0       	ldi	r24, 0x05	; 5
 29e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
      SET_USI_TO_READ_DATA( );
 2a2:	b8 98       	cbi	0x17, 0	; 23
 2a4:	80 e7       	ldi	r24, 0x70	; 112
 2a6:	8e b9       	out	0x0e, r24	; 14
      break;
 2a8:	14 c0       	rjmp	.+40     	; 0x2d2 <__stack+0x73>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 2aa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <rxHead>
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	8f 70       	andi	r24, 0x0F	; 15
 2b2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <rxHead>
      rxBuf[ rxHead ] = USIDR;
 2b6:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <rxHead>
 2ba:	8f b1       	in	r24, 0x0f	; 15
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	eb 57       	subi	r30, 0x7B	; 123
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	80 83       	st	Z, r24
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
      SET_USI_TO_SEND_ACK( );
 2ca:	1f b8       	out	0x0f, r1	; 15
 2cc:	b8 9a       	sbi	0x17, 0	; 23
 2ce:	8e e7       	ldi	r24, 0x7E	; 126
 2d0:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>

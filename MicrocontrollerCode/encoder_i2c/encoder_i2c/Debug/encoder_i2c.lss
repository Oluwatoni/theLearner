
encoder_i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  00800060  00800060  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089e  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000665  00000000  00000000  00000d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000511  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d6  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000209  00000000  00000000  00001e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002087  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	55 c0       	rjmp	.+170    	; 0xb0 <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	7e c0       	rjmp	.+252    	; 0x106 <__vector_4>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	d3 c0       	rjmp	.+422    	; 0x1c2 <__vector_13>
  1c:	ee c0       	rjmp	.+476    	; 0x1fa <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a9 39       	cpi	r26, 0x99	; 153
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	64 c1       	rjmp	.+712    	; 0x306 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
inline void deactivate_timer_interrupt(){
	TIMSK &= 0;
}

int main(void){
	cli();
  40:	f8 94       	cli
	uint8_t pulse_count;
	uint16_t dt;
}pulses;
	
inline void activate_PB4_interrupt(){
	GIMSK |= 0b00100000;
  42:	8b b7       	in	r24, 0x3b	; 59
  44:	80 62       	ori	r24, 0x20	; 32
  46:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= 0b00010000;
  48:	ac 9a       	sbi	0x15, 4	; 21
	cli();
    //PB4 change interrupt setup 
	activate_PB4_interrupt();

//	set pin as an input pin
	PORTB |= (0 << PB4);
  4a:	88 b3       	in	r24, 0x18	; 24
  4c:	88 bb       	out	0x18, r24	; 24
	DDRB &= ~(1 << DDB4);
  4e:	bc 98       	cbi	0x17, 4	; 23
	
	//set up timer
	TCCR1 |= (1 << 2);
  50:	80 b7       	in	r24, 0x30	; 48
  52:	84 60       	ori	r24, 0x04	; 4
  54:	80 bf       	out	0x30, r24	; 48
	GIMSK &= 0;
	PCMSK &= 0;
}

inline void activate_timer_interrupt(){
	TIMSK |= (1 << TOIE1);
  56:	89 b7       	in	r24, 0x39	; 57
  58:	84 60       	ori	r24, 0x04	; 4
  5a:	89 bf       	out	0x39, r24	; 57
	
	//set up timer
	TCCR1 |= (1 << 2);
	activate_timer_interrupt();
	
	pulses.pulse_count = 0;
  5c:	e6 e9       	ldi	r30, 0x96	; 150
  5e:	f0 e0       	ldi	r31, 0x00	; 0
  60:	10 82       	st	Z, r1
	pulses.dt = 0;
  62:	12 82       	std	Z+2, r1	; 0x02
  64:	11 82       	std	Z+1, r1	; 0x01
	usiTwiSlaveInit(SLAVE_ADDRESS);
  66:	87 e0       	ldi	r24, 0x07	; 7
  68:	6b d0       	rcall	.+214    	; 0x140 <usiTwiSlaveInit>
	sei();
  6a:	78 94       	sei
		if(usiTwiDataInReceiveBuffer()){
			switch(usiTwiReceiveByte()){
				case 'r':
					deactivate_PB4_interrupt();
					deactivate_timer_interrupt();
					usiTwiTransmitByte(pulses.pulse_count);
  6c:	c6 e9       	ldi	r28, 0x96	; 150
  6e:	d0 e0       	ldi	r29, 0x00	; 0
	pulses.dt = 0;
	usiTwiSlaveInit(SLAVE_ADDRESS);
	sei();
	
    while (1){
		if(usiTwiDataInReceiveBuffer()){
  70:	9f d0       	rcall	.+318    	; 0x1b0 <usiTwiDataInReceiveBuffer>
  72:	88 23       	and	r24, r24
  74:	e9 f3       	breq	.-6      	; 0x70 <main+0x30>
			switch(usiTwiReceiveByte()){
  76:	89 d0       	rcall	.+274    	; 0x18a <usiTwiReceiveByte>
  78:	82 37       	cpi	r24, 0x72	; 114
  7a:	d1 f7       	brne	.-12     	; 0x70 <main+0x30>
	GIMSK |= 0b00100000;
	PCMSK |= 0b00010000;
}

inline void deactivate_PB4_interrupt(){
	GIMSK &= 0;
  7c:	8b b7       	in	r24, 0x3b	; 59
  7e:	1b be       	out	0x3b, r1	; 59
	PCMSK &= 0;
  80:	85 b3       	in	r24, 0x15	; 21
  82:	15 ba       	out	0x15, r1	; 21
inline void activate_timer_interrupt(){
	TIMSK |= (1 << TOIE1);
}

inline void deactivate_timer_interrupt(){
	TIMSK &= 0;
  84:	89 b7       	in	r24, 0x39	; 57
  86:	19 be       	out	0x39, r1	; 57
		if(usiTwiDataInReceiveBuffer()){
			switch(usiTwiReceiveByte()){
				case 'r':
					deactivate_PB4_interrupt();
					deactivate_timer_interrupt();
					usiTwiTransmitByte(pulses.pulse_count);
  88:	88 81       	ld	r24, Y
  8a:	6f d0       	rcall	.+222    	; 0x16a <usiTwiTransmitByte>
					usiTwiTransmitByte(pulses.dt >> 8);
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	9a 81       	ldd	r25, Y+2	; 0x02
  90:	89 2f       	mov	r24, r25
  92:	6b d0       	rcall	.+214    	; 0x16a <usiTwiTransmitByte>
					usiTwiTransmitByte(pulses.dt & 0xFF);
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	9a 81       	ldd	r25, Y+2	; 0x02
  98:	68 d0       	rcall	.+208    	; 0x16a <usiTwiTransmitByte>
					pulses.pulse_count = 0;
  9a:	18 82       	st	Y, r1
					pulses.dt = 0;
  9c:	1a 82       	std	Y+2, r1	; 0x02
  9e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t pulse_count;
	uint16_t dt;
}pulses;
	
inline void activate_PB4_interrupt(){
	GIMSK |= 0b00100000;
  a0:	8b b7       	in	r24, 0x3b	; 59
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= 0b00010000;
  a6:	ac 9a       	sbi	0x15, 4	; 21
	GIMSK &= 0;
	PCMSK &= 0;
}

inline void activate_timer_interrupt(){
	TIMSK |= (1 << TOIE1);
  a8:	89 b7       	in	r24, 0x39	; 57
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	89 bf       	out	0x39, r24	; 57
  ae:	e0 cf       	rjmp	.-64     	; 0x70 <main+0x30>

000000b0 <__vector_2>:
			}
		}
	}
}

ISR(PCINT0_vect){
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	3f 93       	push	r19
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	uint8_t pin_value = PINB & (1 << PB4);
  c6:	26 b3       	in	r18, 0x16	; 22
  c8:	20 71       	andi	r18, 0x10	; 16
	cli();
  ca:	f8 94       	cli
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	9e e4       	ldi	r25, 0x4E	; 78
	//to debounce the encoder
	for (int i = 0; i < 20000; i++)
		_NOP();
  d0:	00 00       	nop
  d2:	01 97       	sbiw	r24, 0x01	; 1

ISR(PCINT0_vect){
	uint8_t pin_value = PINB & (1 << PB4);
	cli();
	//to debounce the encoder
	for (int i = 0; i < 20000; i++)
  d4:	e9 f7       	brne	.-6      	; 0xd0 <__vector_2+0x20>
		_NOP();
	if (pin_value == (PINB & (1 << PB4)))
  d6:	86 b3       	in	r24, 0x16	; 22
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	80 71       	andi	r24, 0x10	; 16
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	29 f4       	brne	.+10     	; 0xee <__vector_2+0x3e>
		pulses.pulse_count++;
  e4:	e6 e9       	ldi	r30, 0x96	; 150
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 83       	st	Z, r24
	sei();
  ee:	78 94       	sei
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	3f 91       	pop	r19
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_4>:

ISR(TIM1_OVF_vect){
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	//F_CPU/(Prescaler)*(256-Timer preset) = no of interrupts per second
	TCNT1 = 156;
 118:	8c e9       	ldi	r24, 0x9C	; 156
 11a:	8f bd       	out	0x2f, r24	; 47
	cli();
 11c:	f8 94       	cli
	pulses.dt++;
 11e:	e6 e9       	ldi	r30, 0x96	; 150
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	81 81       	ldd	r24, Z+1	; 0x01
 124:	92 81       	ldd	r25, Z+2	; 0x02
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	92 83       	std	Z+2, r25	; 0x02
 12a:	81 83       	std	Z+1, r24	; 0x01
	sei();
 12c:	78 94       	sei
}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <usiTwiSlaveInit>:
usiTwiSlaveInit(
  uint8_t ownAddress
)
{

  slaveAddress = ownAddress;
 140:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
 144:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <rxTail>
  rxHead = 0;
 148:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <rxHead>
  txTail = 0;
 14c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <txTail>
  txHead = 0;
 150:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <txHead>
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 154:	87 b3       	in	r24, 0x17	; 23
 156:	85 60       	ori	r24, 0x05	; 5
 158:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 15a:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 15c:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 15e:	b8 98       	cbi	0x17, 0	; 23

  USICR =
 160:	88 ea       	ldi	r24, 0xA8	; 168
 162:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
 164:	80 ef       	ldi	r24, 0xF0	; 240
 166:	8e b9       	out	0x0e, r24	; 14
 168:	08 95       	ret

0000016a <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
 16a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <txHead>
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	2f 71       	andi	r18, 0x1F	; 31

  // wait for free space in buffer
  while ( tmphead == txTail );
 172:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <txTail>
 176:	29 17       	cp	r18, r25
 178:	e1 f3       	breq	.-8      	; 0x172 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
 17a:	e2 2f       	mov	r30, r18
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ed 59       	subi	r30, 0x9D	; 157
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
 184:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <txHead>
 188:	08 95       	ret

0000018a <usiTwiReceiveByte>:
  void
)
{

  // wait for Rx data
  while ( rxHead == rxTail );
 18a:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <rxHead>
 18e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <rxTail>
 192:	98 17       	cp	r25, r24
 194:	d1 f3       	breq	.-12     	; 0x18a <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 196:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <rxTail>
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <rxTail>

  // return data from the buffer.
  return rxBuf[ rxTail ];
 1a2:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <rxTail>
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	eb 57       	subi	r30, 0x7B	; 123
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255

} // end usiTwiReceiveByte
 1ac:	80 81       	ld	r24, Z
 1ae:	08 95       	ret

000001b0 <usiTwiDataInReceiveBuffer>:
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
 1b0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <rxHead>
 1b4:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <rxTail>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	29 13       	cpse	r18, r25
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <usiTwiDataInReceiveBuffer+0x10>
 1be:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
 1c0:	08 95       	ret

000001c2 <__vector_13>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 1ce:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <overflowState>

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 1d2:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 1d4:	b2 9b       	sbis	0x16, 2	; 22
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__vector_13+0x1a>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 1d8:	b0 9b       	sbis	0x16, 0	; 22
 1da:	fc cf       	rjmp	.-8      	; 0x1d4 <__vector_13+0x12>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 1dc:	b0 99       	sbic	0x16, 0	; 22
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <__vector_13+0x24>
  {

    // a Stop Condition did not occur

    USICR =
 1e0:	88 ef       	ldi	r24, 0xF8	; 248
 1e2:	8d b9       	out	0x0d, r24	; 13
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__vector_13+0x28>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 1e6:	88 ea       	ldi	r24, 0xA8	; 168
 1e8:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 1ea:	80 ef       	ldi	r24, 0xF0	; 240
 1ec:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

} // end ISR( USI_START_VECTOR )
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_14>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31

  switch ( overflowState )
 20c:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <overflowState>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	09 f4       	brne	.+2      	; 0x216 <__vector_14+0x1c>
 214:	4c c0       	rjmp	.+152    	; 0x2ae <__stack+0x4f>
 216:	28 f4       	brcc	.+10     	; 0x222 <__vector_14+0x28>
 218:	88 23       	and	r24, r24
 21a:	59 f0       	breq	.+22     	; 0x232 <__vector_14+0x38>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	69 f1       	breq	.+90     	; 0x27a <__stack+0x1b>
 220:	69 c0       	rjmp	.+210    	; 0x2f4 <__stack+0x95>
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	09 f4       	brne	.+2      	; 0x228 <__vector_14+0x2e>
 226:	4b c0       	rjmp	.+150    	; 0x2be <__stack+0x5f>
 228:	00 f1       	brcs	.+64     	; 0x26a <__stack+0xb>
 22a:	85 30       	cpi	r24, 0x05	; 5
 22c:	09 f4       	brne	.+2      	; 0x230 <__vector_14+0x36>
 22e:	4e c0       	rjmp	.+156    	; 0x2cc <__stack+0x6d>
 230:	61 c0       	rjmp	.+194    	; 0x2f4 <__stack+0x95>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 232:	8f b1       	in	r24, 0x0f	; 15
 234:	88 23       	and	r24, r24
 236:	31 f0       	breq	.+12     	; 0x244 <__vector_14+0x4a>
 238:	8f b1       	in	r24, 0x0f	; 15
 23a:	86 95       	lsr	r24
 23c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 240:	89 13       	cpse	r24, r25
 242:	0e c0       	rjmp	.+28     	; 0x260 <__stack+0x1>
      {
          if ( USIDR & 0x01 )
 244:	78 9b       	sbis	0x0f, 0	; 15
 246:	04 c0       	rjmp	.+8      	; 0x250 <__vector_14+0x56>
        {
          overflowState = USI_SLAVE_SEND_DATA;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
 24e:	03 c0       	rjmp	.+6      	; 0x256 <__vector_14+0x5c>
        }
        else
        {
          overflowState = USI_SLAVE_REQUEST_DATA;
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
        } // end if
        SET_USI_TO_SEND_ACK( );
 256:	1f b8       	out	0x0f, r1	; 15
 258:	b8 9a       	sbi	0x17, 0	; 23
 25a:	8e e7       	ldi	r24, 0x7E	; 126
 25c:	8e b9       	out	0x0e, r24	; 14
 25e:	4a c0       	rjmp	.+148    	; 0x2f4 <__stack+0x95>
      }
      else
      {
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 260:	88 ea       	ldi	r24, 0xA8	; 168
 262:	8d b9       	out	0x0d, r24	; 13
 264:	80 e7       	ldi	r24, 0x70	; 112
 266:	8e b9       	out	0x0e, r24	; 14
 268:	45 c0       	rjmp	.+138    	; 0x2f4 <__stack+0x95>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 26a:	8f b1       	in	r24, 0x0f	; 15
 26c:	88 23       	and	r24, r24
 26e:	29 f0       	breq	.+10     	; 0x27a <__stack+0x1b>
      {
        // if NACK, the master does not want more data
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 270:	88 ea       	ldi	r24, 0xA8	; 168
 272:	8d b9       	out	0x0d, r24	; 13
 274:	80 e7       	ldi	r24, 0x70	; 112
 276:	8e b9       	out	0x0e, r24	; 14
        return;
 278:	3d c0       	rjmp	.+122    	; 0x2f4 <__stack+0x95>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 27a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <txHead>
 27e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <txTail>
 282:	98 17       	cp	r25, r24
 284:	b9 f1       	breq	.+110    	; 0x2f4 <__stack+0x95>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 286:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <txTail>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	8f 71       	andi	r24, 0x1F	; 31
 28e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <txTail>
        USIDR = txBuf[ txTail ];
 292:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <txTail>
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ed 59       	subi	r30, 0x9D	; 157
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	80 81       	ld	r24, Z
 29e:	8f b9       	out	0x0f, r24	; 15
		// before.

        //SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
      SET_USI_TO_SEND_DATA( );
 2a6:	b8 9a       	sbi	0x17, 0	; 23
 2a8:	80 e7       	ldi	r24, 0x70	; 112
 2aa:	8e b9       	out	0x0e, r24	; 14
      break;
 2ac:	23 c0       	rjmp	.+70     	; 0x2f4 <__stack+0x95>

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
      SET_USI_TO_READ_ACK( );
 2b4:	b8 98       	cbi	0x17, 0	; 23
 2b6:	1f b8       	out	0x0f, r1	; 15
 2b8:	8e e7       	ldi	r24, 0x7E	; 126
 2ba:	8e b9       	out	0x0e, r24	; 14
      break;
 2bc:	1b c0       	rjmp	.+54     	; 0x2f4 <__stack+0x95>

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
      SET_USI_TO_READ_DATA( );
 2c4:	b8 98       	cbi	0x17, 0	; 23
 2c6:	80 e7       	ldi	r24, 0x70	; 112
 2c8:	8e b9       	out	0x0e, r24	; 14
      break;
 2ca:	14 c0       	rjmp	.+40     	; 0x2f4 <__stack+0x95>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 2cc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <rxHead>
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <rxHead>
      rxBuf[ rxHead ] = USIDR;
 2d8:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <rxHead>
 2dc:	8f b1       	in	r24, 0x0f	; 15
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	eb 57       	subi	r30, 0x7B	; 123
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	80 83       	st	Z, r24
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <overflowState>
      SET_USI_TO_SEND_ACK( );
 2ec:	1f b8       	out	0x0f, r1	; 15
 2ee:	b8 9a       	sbi	0x17, 0	; 23
 2f0:	8e e7       	ldi	r24, 0x7E	; 126
 2f2:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
